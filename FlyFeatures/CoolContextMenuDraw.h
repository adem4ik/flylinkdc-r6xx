///////////////////////////////////////////////////////////////////////////////
//
// CoolContextMenuDraw.h : header file
// (c) http://www.codeproject.com/KB/wtl/WTLOwnerDrawCtxtMenu.aspx
//
///////////////////////////////////////////////////////////////////////////////

#pragma once

#include "atlbase.h"
#include "../wtl/atlapp.h"
#include "../wtl/atlmisc.h"

///////////////////////////////////////////////////////////////////////////////
typedef DWORD HLSCOLOR;
#define HLS(h,l,s) ((HLSCOLOR)(((BYTE)(h)|((WORD)((BYTE)(l))<<8))|(((DWORD)(BYTE)(s))<<16)))

///////////////////////////////////////////////////////////////////////////////
#define HLS_H(hls) ((BYTE)(hls))
#define HLS_L(hls) ((BYTE)(((WORD)(hls)) >> 8))
#define HLS_S(hls) ((BYTE)((hls)>>16))

///////////////////////////////////////////////////////////////////////////////
HLSCOLOR RGB2HLS(COLORREF rgb);
COLORREF HLS2RGB(HLSCOLOR hls);

///////////////////////////////////////////////////////////////////////////////
// Performs some modifications on the specified color : luminance and saturation
COLORREF HLS_TRANSFORM(COLORREF rgb, int percent_L, int percent_S);

///////////////////////////////////////////////////////////////////////////////
// Usefull macros
//
#define KEYDOWN(Key) ((GetKeyState(Key)&0x8000)!=0)


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class CClientRect : public CRect
{
	public:
		CClientRect(HWND hWnd)
		{
			::GetClientRect(hWnd, this);
		};
		CClientRect(const CWindow* pWnd)
		{
			::GetClientRect(pWnd->m_hWnd, this);
		};
};


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class CWindowRect : public CRect
{
	public:
		CWindowRect(HWND hWnd)
		{
			::GetWindowRect(hWnd, this);
		};
		CWindowRect(const CWindow* pWnd)
		{
			::GetWindowRect(pWnd->m_hWnd, this);
		};
};
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class CBufferDC : public CDCHandle
{
		HDC     m_hDestDC;
		CBitmap m_bitmap;     // Bitmap in Memory DC
		CRect   m_rect;
		HGDIOBJ m_hOldBitmap; // Previous Bitmap
		
	public:
		CBufferDC(HDC hDestDC, const CRect& rcPaint = CRect(0, 0, 0, 0));
		~CBufferDC();
};


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class CPenDC
{
	protected:
		CPen m_pen;
		HDC m_hDC;
		HPEN m_hOldPen;
		
	public:
		CPenDC(HDC hDC, COLORREF crColor = CLR_NONE);
		~CPenDC();
		
		void Color(COLORREF crColor);
		COLORREF Color() const;
};


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class CBrushDC
{
	protected:
		CBrush m_brush;
		HDC m_hDC;
		HBRUSH m_hOldBrush;
		
	public:
		CBrushDC(HDC hDC, COLORREF crColor = CLR_NONE);
		~CBrushDC();
		
		void Color(COLORREF crColor);
		COLORREF Color() const;
};


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class CBoldDC
{
	protected:
		CFont m_fontBold;
		HDC m_hDC;
		HFONT m_hDefFont;
		
	public:
		CBoldDC(HDC hDC, bool bBold);
		~CBoldDC();
};
